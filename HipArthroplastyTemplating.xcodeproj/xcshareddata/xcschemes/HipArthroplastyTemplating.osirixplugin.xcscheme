<?xml version="1.0" encoding="UTF-8"?>
<Scheme
   LastUpgradeVersion = "1540"
   version = "1.7">
   <BuildAction
      parallelizeBuildables = "YES"
      buildImplicitDependencies = "YES">
      <BuildActionEntries>
         <BuildActionEntry
            buildForTesting = "YES"
            buildForRunning = "YES"
            buildForProfiling = "YES"
            buildForArchiving = "YES"
            buildForAnalyzing = "YES">
            <BuildableReference
               BuildableIdentifier = "primary"
               BlueprintIdentifier = "8D5B49AC048680CD000E48DA"
               BuildableName = "HipArthroplastyTemplating.osirixplugin"
               BlueprintName = "HipArthroplastyTemplating"
               ReferencedContainer = "container:HipArthroplastyTemplating.xcodeproj">
            </BuildableReference>
         </BuildActionEntry>
      </BuildActionEntries>
   </BuildAction>
   <TestAction
      buildConfiguration = "Debug"
      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
      shouldUseLaunchSchemeArgsEnv = "YES">
      <Testables>
      </Testables>
   </TestAction>
   <LaunchAction
      buildConfiguration = "Debug"
      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
      launchStyle = "0"
      useCustomWorkingDirectory = "NO"
      ignoresPersistentStateOnLaunch = "NO"
      debugDocumentVersioning = "YES"
      debugServiceExtension = "internal"
      allowLocationSimulation = "YES">
      <PathRunnable
         runnableDebuggingMode = "0"
         FilePath = "/Applications/OsiriX Lite.app">
      </PathRunnable>
      <MacroExpansion>
         <BuildableReference
            BuildableIdentifier = "primary"
            BlueprintIdentifier = "8D5B49AC048680CD000E48DA"
            BuildableName = "HipArthroplastyTemplating.osirixplugin"
            BlueprintName = "HipArthroplastyTemplating"
            ReferencedContainer = "container:HipArthroplastyTemplating.xcodeproj">
         </BuildableReference>
      </MacroExpansion>
      <CommandLineArguments>
         <CommandLineArgument
            argument = "--LoadPlugin &quot;$BUILT_PRODUCTS_DIR/$FULL_PRODUCT_NAME&quot;"
            isEnabled = "YES">
         </CommandLineArgument>
      </CommandLineArguments>
   </LaunchAction>
   <ProfileAction
      buildConfiguration = "Release"
      shouldUseLaunchSchemeArgsEnv = "YES"
      savedToolIdentifier = ""
      useCustomWorkingDirectory = "NO"
      debugDocumentVersioning = "YES">
      <MacroExpansion>
         <BuildableReference
            BuildableIdentifier = "primary"
            BlueprintIdentifier = "8D5B49AC048680CD000E48DA"
            BuildableName = "HipArthroplastyTemplating.osirixplugin"
            BlueprintName = "HipArthroplastyTemplating"
            ReferencedContainer = "container:HipArthroplastyTemplating.xcodeproj">
         </BuildableReference>
      </MacroExpansion>
   </ProfileAction>
   <AnalyzeAction
      buildConfiguration = "Debug">
   </AnalyzeAction>
   <ArchiveAction
      buildConfiguration = "Release"
      revealArchiveInOrganizer = "YES">
      <PostActions>
         <ExecutionAction
            ActionType = "Xcode.IDEStandardExecutionActionsCore.ExecutionActionType.ShellScriptAction">
            <ActionContent
               title = "ZIP"
               scriptText = "#exec &gt; /tmp/log.txt 2&gt;&amp;1&#10;# first, the compiled plugin&#10;&#10;cd &quot;$TARGET_BUILD_DIR&quot;&#10;open .&#10;&#10;path=&quot;$FULL_PRODUCT_NAME&quot;&#10;rpath=$(readlink &quot;$path&quot;)&#10;if [ &quot;$rpath&quot; != &apos;&apos; ]; then&#10;    path=&quot;$rpath&quot;&#10;fi&#10;&#10;pinfo=&quot;$path/Contents/Info.plist&quot;&#10;version=$(/usr/libexec/PlistBuddy -c &quot;Print :CFBundleShortVersionString&quot; &quot;$pinfo&quot;)&#10;version=$(echo &quot;$version&quot; | sed &apos;s/ /-/g&apos;)&#10;&#10;zip=&quot;$BUILT_PRODUCTS_DIR/$PRODUCT_NAME-$version.zip&quot;&#10;&#10;echo &quot;Zipping $path to $zip&quot;&#10;&#10;rm -Rf &quot;$zip&quot;&#10;cd $(dirname &quot;$path&quot;)&#10;find $(basename &quot;$path&quot;) -path &apos;*/.*&apos; -prune -o -print | zip --symlinks &quot;$zip&quot; -@&#10;&#10;# next, the code for this project and, if git-archive-all is available, all submodules&#10;&#10;cd &quot;$PROJECT_DIR&quot;&#10;zip=&quot;$BUILT_PRODUCTS_DIR/$PRODUCT_NAME-Code-$version.zip&quot;&#10;&#10;echo &quot;Zipping $product code to $zip&quot;&#10;&#10;command_exists () {&#10;    type &quot;$1&quot; &gt;/dev/null 2&gt;&amp;1 ;&#10;}&#10;&#10;if command_exists git-archive-all ; then&#10;git-archive-all &quot;$zip&quot;&#10;else&#10;git archive --format zip --output &quot;$zip&quot; master&#10;if [ -e &quot;.gitmodules&quot; ] &amp;&amp; [ $(grep path .gitmodules -c) != &quot;0&quot; ] ; then&#10;echo &quot;warning: I need git-archive-all to produce a project code archive complete with all submodules. The currently produced archive only contains the code for $PROJECT_NAME, not its submodules!&quot;&#10;fi&#10;fi">
               <EnvironmentBuildable>
                  <BuildableReference
                     BuildableIdentifier = "primary"
                     BlueprintIdentifier = "8D5B49AC048680CD000E48DA"
                     BuildableName = "HipArthroplastyTemplating.osirixplugin"
                     BlueprintName = "HipArthroplastyTemplating"
                     ReferencedContainer = "container:HipArthroplastyTemplating.xcodeproj">
                  </BuildableReference>
               </EnvironmentBuildable>
            </ActionContent>
         </ExecutionAction>
      </PostActions>
   </ArchiveAction>
</Scheme>
